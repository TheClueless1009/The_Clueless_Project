Index: app/src/main/java/sg/edu/singaporetech/sit/theclueless/RedditPost.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sg/edu/singaporetech/sit/theclueless/RedditPost.java	(date 1616335812105)
+++ app/src/main/java/sg/edu/singaporetech/sit/theclueless/RedditPost.java	(date 1616335812105)
@@ -23,7 +23,7 @@
      * A constructor to create new item.
      * @param title This is the title of a single post.
      * @param content This is the content of a single post.
-     * @param score This is the score of a single post.
+     * @param score This is the number of upvotes of a single post.
      */
 
     public RedditPost(String title, String content, int score) {
@@ -34,16 +34,15 @@
 
     /**
      * Get the title.
-     * @return the title.
+     * @return the title of the post.
      */
     public String getTitle() {
         return title;
     }
 
-
     /**
      * Get the content.
-     * @return the content.
+     * @return the content of the post.
      */
     public String getContent() {
         return content;
@@ -51,7 +50,7 @@
 
     /**
      * Get the score.
-     * @return the score.
+     * @return the number of upvotes for the post.
      */
     public int getScore() {
         return score;
@@ -59,7 +58,7 @@
 
     /**
      * Get the time that the post was created.
-     * @return the time in int.
+     * @return the time the post was created and posted in UTC timing stored as in integer.
      */
     public int getCreated_utc() {
         return this.created_utc;
Index: app/src/main/java/sg/edu/singaporetech/sit/theclueless/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sg/edu/singaporetech/sit/theclueless/MainActivity.java	(date 1616335691174)
+++ app/src/main/java/sg/edu/singaporetech/sit/theclueless/MainActivity.java	(date 1616335691174)
@@ -16,7 +16,7 @@
     Button btnTwitter, btnReddit, btnPieChart, btnSearch, btnTweetTime, btnRedTime, btnChart;
 
     /**
-     * When the screen first loaded.
+     * The first screen that is loaded with all the buttons for the user to select
      */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
Index: app/src/main/java/sg/edu/singaporetech/sit/theclueless/RedditActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sg/edu/singaporetech/sit/theclueless/RedditActivity.java	(date 1616335756667)
+++ app/src/main/java/sg/edu/singaporetech/sit/theclueless/RedditActivity.java	(date 1616335756667)
@@ -32,7 +32,7 @@
     RedditAdapter caReddit;
 
     /**
-     * When the screen first loaded.
+     *  When the screen first loads, reddits data is being loaded into the ListView.
      */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
Index: app/src/main/java/sg/edu/singaporetech/sit/theclueless/SearchActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sg/edu/singaporetech/sit/theclueless/SearchActivity.java	(date 1616335838444)
+++ app/src/main/java/sg/edu/singaporetech/sit/theclueless/SearchActivity.java	(date 1616335838444)
@@ -36,7 +36,7 @@
     ImageView ivImg;
 
     /**
-     * When the screen first loaded.
+     * When the screen first loads, the Firestore data is received and loaded into the python file where it will produce the image and store into firestore.
      */
 
     @Override
Index: app/src/main/java/sg/edu/singaporetech/sit/theclueless/TwitterActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sg/edu/singaporetech/sit/theclueless/TwitterActivity.java	(date 1616335861762)
+++ app/src/main/java/sg/edu/singaporetech/sit/theclueless/TwitterActivity.java	(date 1616335861762)
@@ -24,7 +24,7 @@
     TwitterAdapter caTwitter;
 
     /**
-     * When the screen first loaded.
+     * When the screen first loads, twitters data is being loaded into the ListView.
      */
 
     @Override
Index: app/src/main/java/sg/edu/singaporetech/sit/theclueless/PieChartActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sg/edu/singaporetech/sit/theclueless/PieChartActivity.java	(date 1616335721045)
+++ app/src/main/java/sg/edu/singaporetech/sit/theclueless/PieChartActivity.java	(date 1616335721045)
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 
 /**
- * This is a PieChart Activity that will display Pie Chart.
+ * This is a PieChart Activity that will display Pie Chart in relation to the number of likes for Twitter and upvotes for Reddit.
  * @author The Clueless
  */
 
@@ -39,7 +39,7 @@
     TwitterPost currentLikes;
 
     /**
-     * When the screen first loaded.
+     * When the screen first loads, both reddit and twitter's collection was used to get the necessary data, and then inserted into the PieChart.
      */
     @Override
     protected void onCreate(Bundle savedInstanceState)
Index: app/src/androidTest/java/sg/edu/singaporetech/sit/theclueless/TwitterActivityTest.groovy
===================================================================
--- app/src/androidTest/java/sg/edu/singaporetech/sit/theclueless/TwitterActivityTest.groovy	(date 0)
+++ app/src/androidTest/java/sg/edu/singaporetech/sit/theclueless/TwitterActivityTest.groovy	(date 0)
@@ -1,10 +0,0 @@
-package sg.edu.singaporetech.sit.theclueless
-
-import org.junit.Test
-
-class TwitterActivityTest {
-
-    @Test
-    void testOnCreate() {
-    }
-}
Index: app/src/androidTest/java/sg/edu/singaporetech/sit/theclueless/MainActivityTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/androidTest/java/sg/edu/singaporetech/sit/theclueless/MainActivityTest.java	(date 1616337945379)
+++ app/src/androidTest/java/sg/edu/singaporetech/sit/theclueless/MainActivityTest.java	(date 1616337945379)
@@ -1,17 +1,40 @@
 package sg.edu.singaporetech.sit.theclueless;
 
 
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.ViewParent;
+
+import androidx.test.espresso.Espresso;
+import androidx.test.espresso.ViewInteraction;
+import androidx.test.espresso.action.ViewActions;
+import androidx.test.espresso.assertion.ViewAssertions;
+import androidx.test.espresso.matcher.ViewMatchers;
 import androidx.test.filters.LargeTest;
 import androidx.test.rule.ActivityTestRule;
 import androidx.test.runner.AndroidJUnit4;
 
+import org.hamcrest.Description;
+import org.hamcrest.Matcher;
+import org.hamcrest.Matchers;
+import org.hamcrest.TypeSafeMatcher;
+import org.hamcrest.core.IsInstanceOf;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
 import static androidx.test.espresso.Espresso.onView;
+import static androidx.test.espresso.Espresso.pressBack;
 import static androidx.test.espresso.action.ViewActions.click;
+import static androidx.test.espresso.action.ViewActions.closeSoftKeyboard;
+import static androidx.test.espresso.action.ViewActions.replaceText;
+import static androidx.test.espresso.assertion.ViewAssertions.matches;
+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;
+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;
 import static androidx.test.espresso.matcher.ViewMatchers.withId;
+import static androidx.test.espresso.matcher.ViewMatchers.withText;
+import static org.hamcrest.Matchers.allOf;
+import static org.hamcrest.Matchers.is;
 
 @LargeTest
 @RunWith(AndroidJUnit4.class)
@@ -22,7 +45,357 @@
 
     @Test
     public void mainActivityTest() {
-        onView(withId(R.id.btnReddit)).perform(click());
-        onView(withId(R.id.btnTwitter)).perform(click());
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnTwitter), ViewMatchers.withText("View Twitter Data"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withClassName(Matchers.is("android.widget.LinearLayout")),
+                                        2),
+                                0),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton2 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnReddit), ViewMatchers.withText("View Reddit Data"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withClassName(Matchers.is("android.widget.LinearLayout")),
+                                        2),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton2.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton3 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnRedditTime), ViewMatchers.withText("View Reddit Time Bar Graph"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withClassName(Matchers.is("android.widget.LinearLayout")),
+                                        6),
+                                0),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton3.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton4 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnTwitterTime), ViewMatchers.withText("View Twitter Time Bar Graph"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withClassName(Matchers.is("android.widget.LinearLayout")),
+                                        6),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton4.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton5 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnPieChart), ViewMatchers.withText("View Pie Chart"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withClassName(Matchers.is("android.widget.LinearLayout")),
+                                        8),
+                                0),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton5.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton6 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnChart), ViewMatchers.withText("View Scatter Chart"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withClassName(Matchers.is("android.widget.LinearLayout")),
+                                        8),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton6.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatButton7 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnSearchK), ViewMatchers.withText("Search Keyword"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withId(android.R.id.content),
+                                        0),
+                                4),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton7.perform(ViewActions.click());
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction appCompatEditText = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.etKeyword),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withId(android.R.id.content),
+                                        0),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        appCompatEditText.perform(ViewActions.click());
+
+        ViewInteraction appCompatEditText3 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.etKeyword),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withId(android.R.id.content),
+                                        0),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        appCompatEditText3.perform(ViewActions.replaceText("myanmar"), ViewActions.closeSoftKeyboard());
+
+        ViewInteraction appCompatButton8 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnSearch), ViewMatchers.withText("Search"),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withId(android.R.id.content),
+                                        0),
+                                2),
+                        ViewMatchers.isDisplayed()));
+        appCompatButton8.perform(ViewActions.click());
+
+        Espresso.pressBack();
+
+        // Added a sleep statement to match the app's execution delay.
+        // The recommended way to handle such scenarios is to use Espresso idling resources:
+        // https://google.github.io/android-testing-support-library/docs/espresso/idling-resource/index.html
+        try {
+            Thread.sleep(7000);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+
+        ViewInteraction button = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnTwitter),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        2),
+                                0),
+                        ViewMatchers.isDisplayed()));
+        button.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button2 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnReddit),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        2),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        button2.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button3 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnSearchK),
+                        childAtPosition(
+                                childAtPosition(
+                                        ViewMatchers.withId(android.R.id.content),
+                                        0),
+                                4),
+                        ViewMatchers.isDisplayed()));
+        button3.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button4 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnRedditTime),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        6),
+                                0),
+                        ViewMatchers.isDisplayed()));
+        button4.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button5 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnTwitterTime),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        6),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        button5.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button6 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnPieChart),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        8),
+                                0),
+                        ViewMatchers.isDisplayed()));
+        button6.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button7 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnChart),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        8),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        button7.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+
+        ViewInteraction button8 = Espresso.onView(
+                Matchers.allOf(ViewMatchers.withId(R.id.btnChart),
+                        childAtPosition(
+                                childAtPosition(
+                                        IsInstanceOf.<View>instanceOf(android.widget.LinearLayout.class),
+                                        8),
+                                1),
+                        ViewMatchers.isDisplayed()));
+        button8.check(ViewAssertions.matches(ViewMatchers.isDisplayed()));
+    }
+
+    private static Matcher<View> childAtPosition(
+            final Matcher<View> parentMatcher, final int position) {
+
+        return new TypeSafeMatcher<View>() {
+            @Override
+            public void describeTo(Description description) {
+                description.appendText("Child at position " + position + " in parent ");
+                parentMatcher.describeTo(description);
+            }
+
+            @Override
+            public boolean matchesSafely(View view) {
+                ViewParent parent = view.getParent();
+                return parent instanceof ViewGroup && parentMatcher.matches(parent)
+                        && view.equals(((ViewGroup) parent).getChildAt(position));
+            }
+        };
+    }
+
+    @Test
+    public void testNegative(){
+
     }
 }
